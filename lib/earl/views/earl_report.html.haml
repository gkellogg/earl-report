-# This template is used for generating a rollup EARL report. It expects to be
-# called with a single _tests_ local with the following structure
-#
-#  {
-#    "@context": "http://rdfa.info/contexts/rdfa-earl.jsonld",
-#    "@id": "http://rdfa.info/test-suite/",
-#    "@type": "earl:Software",
-#    "homepage": "http://rdfa.info/",
-#    "name": "RDFa Test Suite",
-#    "processor": [
-#      {
-#        "@id": "http://www.w3.org/2012/pyRdfa/extract?uri=",
-#        "@type": "earl:TestSubject",
-#        "name": "pyrdfa"
-#      },
-#      ...
-#    ],
-#    "vocabulary": {
-#      "rdfa1.1": "Description",
-#    }
-#    "rdfa1.1": {
-#      "xml": [
-#        {
-#          "@id": "http://rdfa.info/test-suite/test-cases/rdfa1.1/xml/0249.xml",
-#          "@type": "earl:TestCase",
-#          "num": "0001",
-#          "title": "Test 0001: Predicate establishment with @property",
-#          "description": "Tests @property to establish the predicate; literal object is in the content of the element."
-#          "mode": "earl:automatic",
-#          "http://www.w3.org/2012/pyRdfa/extract?uri=": {
-#            "@id": "http://rdfa.info/test-suite/test-details/rdfa1.1/xml/0001?rdfa-extractor=http%3A//www.w3.org/2012/pyRdfa/extract%3Furi%3D",
-#            "@type": "earl:Assertion",
-#            "assertedBy": "http://rdfa.info/test-suite/",
-#            "test": "http://rdfa.info/test-suite/test-cases/rdfa1.1/xml/0249.xml",
-#            "subject": "http://www.w3.org/2012/pyRdfa/extract?uri=",
-#            "result": {
-#              "@type": "earl:TestResult",
-#              "outcome": "earl:passed"
-#            },
-#          }
-#        },
-#        ...
-#      ],
-#     "xhtml1": [...],
-#     ...
-#    }
-#  }
-# Split 'rdfa1.1' into two parts, for defined languages, and other

- MAIN_HOST_LANGUAGES = %w(xhtml1 xml) # Only report on these host languages in the main section
- tests['rdfa1.1'] ||= {}
- tests['rdfa1.1-other'] = tests['rdfa1.1'].reject {|k| MAIN_HOST_LANGUAGES.include?(k)}
- tests['vocabulary']['rdfa1.1-other'] = {'label' => "Other Host Languages", 'description' => %(The following results are for host languages that are not explicitly specified, or for which standards work is not yet complete.)}
- tests['rdfa1.1'].select! { |k| MAIN_HOST_LANGUAGES.include?(k)}
- test_info = {}
!!! 5
%html{:lang => "en"}
  - processors = tests['processor']
  %head
    %meta{"http-equiv" => "Content-Type", :content => "text/html;charset=utf-8"}
    %title
      RDFa 1.1 Processor Conformance
    %script.remove{:type => "text/javascript", :src => "http://dev.w3.org/2009/dap/ReSpec.js/js/respec.js"}
    :javascript
      var respecConfig = {
          // specification status (e.g. WD, LCWD, NOTE, etc.). If in doubt use ED.
          specStatus:           "unofficial",
          copyrightStart:       "2010",
          doRDFa:               "1.1",

          // the specification's short name, as in http://www.w3.org/TR/short-name/
          shortName:            "rdfa-earl",
          subtitle:             "EARL results from the RDFa 1.1 Test Suite",
          // if you wish the publication date to be other than today, set this
          publishDate:  "#{Time.now.strftime("%Y/%m/%d")}",

          // if there is a previously published draft, uncomment this and set its YYYY-MM-DD date
          // and its maturity status
          //previousPublishDate:  "2011-10-23",
          //previousMaturity:     "ED",
          //previousDiffURI:      "http://json-ld.org/spec/ED/json-ld-syntax/20111023/index.html",
          //diffTool:             "http://www.aptest.com/standards/htmldiff/htmldiff.pl",

          // if there a publicly available Editor's Draft, this is the link
          edDraftURI:           "http://rdfa.info/earl-reports/earl.html",

          // if this is a LCWD, uncomment and set the end of its review period
          // lcEnd: "2009-08-05",

          // if you want to have extra CSS, append them to this list
          // it is recommended that the respec.css stylesheet be kept
          extraCSS:             [
              "http://dev.w3.org/2009/dap/ReSpec.js/css/respec.css"
          ],

          // editors, add as many as you like
          // only "name" is required
          editors:  [
              { name: "Gregg Kellogg", url: "http://greggkellogg.net/",
                company: "Kellogg Associates", companyURL: "http://kellogg-assoc.com/" },
          ],

          // authors, add as many as you like.
          // This is optional, uncomment if you have authors as well as editors.
          // only "name" is required. Same format as editors.
          authors:  [
            { name: "Gregg Kellogg", url: "http://greggkellogg.net/",
              company: "Kellogg Associates", companyURL: "http://kellogg-assoc.com/" },
            { name: "IvÃ¡n Herman", url: "http://www.w3.org/People/Ivan/",
              company: "W3C", companyURL: "http://www.w3.org" },
            { name: "Manu Sporny", url: "http://digitalbazaar.com/",
              company: "Digital Bazaar", companyURL: "http://digitalbazaar.com/" }
          ],

          // name of the WG
          wg:           "Linking Data in JSON Community Group",

          // URI of the public WG page
          wgURI:        "http://json-ld.org/",

          // name (with the @w3c.org) of the public mailing to which comments are due
          wgPublicList: "public-linked-json@w3c.org",

          // URI of the patent status for this WG, for Rec-track documents
          // !!!! IMPORTANT !!!!
          // This is important for Rec-track documents, do not copy a patent URI from a random
          // document unless you know what you're doing. If in doubt ask your friendly neighbourhood
          // Team Contact.
          wgPatentURI:  "",
          maxTocLevel: 4,
          //alternateFormats: [ {uri: "diff-20120112.html", label: "diff to previous version"} ],
      };
    :css
      span[property='dc:description'] { display: none; }
      td.PASS { color: green; }
      td.FAIL { color: red; }
      table.report {
        border-width: 1px;
        border-spacing: 2px;
        border-style: outset;
        border-color: gray;
        border-collapse: separate;
        background-color: white;
      }
      table.report th {
        border-width: 1px;
        padding: 1px;
        border-style: inset;
        border-color: gray;
        background-color: white;
        -moz-border-radius: ;
      }
      table.report td {
        border-width: 1px;
        padding: 1px;
        border-style: inset;
        border-color: gray;
        background-color: white;
        -moz-border-radius: ;
      }
      pre.example.inputDoc, pre.example.sparqlResults { margin-left: 0;}
      pre.example.inputDoc::before { content: "Input Document";}
      pre.example.sparqlResults::before { content: "SPARQL Results";}
  %body{:prefix => "earl: http://www.w3.org/ns/earl# doap: http://usefulinc.com/ns/doap# rdfatest: http://rdfa.info/vocabs/rdfa-test#"}
    %section#abstract{:about => tests['@id'], :typeof => tests['@type']}
      %p
        This document reports processor conformance for [[RDFA-CORE]] and related specifications
        according to the requirements of the Evaluation and Report Language (EARL) 1.0 Schema [[EARL10-SCHEMA]].
      %p
        This document describes
        %span{:property => "doap:name"}<=tests['name']
        running at
        %a{:property => "doap:homepage", :href => tests['homepage']}<=tests['homepage']
        = '.'
      %p
        This report is also available in alternate formats:
        %a{:href => "earl.ttl"}
          Turtle
        and
        %a{:href => "earl.jsonld"}
          JSON-LD
    %section#sodt
    - %w(rdfa1.0 rdfa1.1 rdfa1.1-proc rdfa1.1-vocab rdfa1.1-other rdfa1.1-role).each do |version|
      - next unless tests.has_key?(version)
      %section{:rel => "rdfatest:version/#{version}", :typeof => "rdfatest:Version"}
        %h2<=tests['vocabulary'][version]['label']
        %div
          = tests['vocabulary'][version]['description']
        - tests[version].keys.sort.each do |hostLanguage|
          - test_cases = tests[version][hostLanguage]
          - next unless test_cases.is_a?(Array)
          %section{:rel => "rdfatest:hostLanguage/#{hostLanguage}", :inlist => true}
            %h2<=tests['vocabulary'][hostLanguage]['label']
            %div
              = tests['vocabulary'][hostLanguage]['description']
            %table.report
              %tr
                %th
                  Test
                  - processors.each do |processor|
                    - next unless test_cases.first.has_key?(processor['@id'])
                    %th
                      %a{:href => processor['@id']}<=processor['name']
              - test_cases.each do |test|
                - test_info[test['num']] ||= test.clone
                %tr{:typeof => test['@type'], :resource => test['@id']}
                  %td
                    %a{:property => 'rdfatest:num', :href => "#test_#{test['num']}"}<= test['num']
                    %span{:property => 'dc:title'}<= test['title']
                    %span{:property => 'dc:description'}<= test['description']
                  - processors.each do |processor|
                    - url = processor['@id']
                    - next unless test.has_key?(url)
                    - assertion = test[url]
                    - pass_fail = assertion['result']['outcome'].split(':').last.upcase.sub(/ED$/, '')
                    %td{:class => pass_fail, :rel => assertion['@id'], :typeof => assertion['@type']}
                      %link{:property => "earl:assertedBy", :href => assertion['assertedBy']}
                      %link{:property => "earl:test", :href => assertion['test']}
                      %link{:property => "earl:subject", :href => assertion['subject']}
                      %link{:property => 'earl:mode', :href => assertion['mode']}/ 
                      %span{:property => "earl:result", :typeof => assertion['result']['@type'], :resource => assertion['result']['outcome']}
                        = pass_fail
    %section.appendix
      %h2
        Processors
      %p
        This report was tested using the following processors:
      %dl
        - processors.each do |processor|
          %dt{:about => processor['@id'], :typeof => processor['@type'].join(" "), :property => "doap:name"}
            = processor['name']
          %dd{:about => processor['@id']}
            %dl
              - if processor['doap_desc']
                %dt= "Description"
                %dd{:property => "doap:description"}<= processor['doap_desc']
              - if processor['language']
                %dt= "Programming Language"
                %dd{:property => "doap:programming-language"}<= processor['language']
              - if processor['developer']
                %dt= "Developer"
                %dd{:property => "doap:developer", :resource => processor['developer']['@id'], :typeof => processor['developer']['@type']}
                  - if processor['developer']['@id']
                    %a{:href => processor['developer']['@id']}
                      %span{:property => "foaf:name"}<= processor['developer']['foaf:name']
                  - else
                    %span{:property => "foaf:name"}<= processor['developer']['foaf:name']
              - if processor['homepage']
                %dt= "Home Page"
                %dd{:property => "doap:homepage"}
                  %a{:href=> processor['homepage']}=processor['homepage']
    %section.appendix
      %h2
        Individual Test Results
      %p
        Individual test results used to construct this report are available here:
      %ul
        - source_files.each do |file|
          %li
            %a.source{:href => file}<= file
    %section.appendix
      %h2
        Test Definitions
      %p
        Tests are repeated for each RDFa version and Host Language as necessary, but are based on
        common tests with minor rewriting based on host language specific attributes.
      %p
        Input and SPARQL representations are shown for XHTML5, but will have some slight variation
        for different host languages.
      %dl
        - keys = test_info.keys.sort
        - keys.each do |num|
          - test = test_info[num]
          %dt{:id => "test_#{test['num']}"}
            Test
            = test['num'] + ":"
            = test['title']
          %dd
            = test['description']
            %dl
              %dt
                %pre{:class => "example inputDoc"}<&= CrazyIvan::Core::get_test_content("rdfa1.1", "xhtml5", test['num'])
                %pre{:class => "example sparqlResults"}<&= CrazyIvan::Core::get_test_content("rdfa1.1", "xhtml5", test['num'], "sparql")
